//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
/**
 * Class generated from <tt>Frame.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet Frame
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int seq_nr;
 *     string payload;
 *     string parity_byte;
 *     int kind;
 * 	// we will use seq_nr as the ack_nr when sending a control bit 
 * 
 * }
 * </pre>
 *
 * Frame_Base is only useful if it gets subclassed, and Frame is derived from it.
 * The minimum code to be written for Frame is the following:
 *
 * <pre>
 * class Frame : public Frame_Base
 * {
 *   private:
 *     void copy(const Frame& other) { ... }

 *   public:
 *     Frame(const char *name=nullptr, short kind=0) : Frame_Base(name,kind) {}
 *     Frame(const Frame& other) : Frame_Base(other) {copy(other);}
 *     Frame& operator=(const Frame& other) {if (this==&other) return *this; Frame_Base::operator=(other); copy(other); return *this;}
 *     virtual Frame *dup() const override {return new Frame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Frame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Frame)
 * </pre>
 */
class Frame_Base : public ::omnetpp::cPacket
{
  protected:
    int seq_nr = 0;
    omnetpp::opp_string payload;
    omnetpp::opp_string parity_byte;
    int kind = 0;

  private:
    void copy(const Frame_Base& other);

  public:
    bool operator==(const Frame_Base&) = delete;
    // make constructors protected to avoid instantiation
    Frame_Base(const char *name=nullptr, short kind=0);
    Frame_Base(const Frame_Base& other);
    // make assignment operator protected to force the user override it
    Frame_Base& operator=(const Frame_Base& other);

    virtual ~Frame_Base();
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeq_nr() const;
    virtual void setSeq_nr(int seq_nr);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);

    virtual const char * getParity_byte() const;
    virtual void setParity_byte(const char * parity_byte);

    virtual int getKind() const;
    virtual void setKind(int kind);
};


namespace omnetpp {

template<> inline Frame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

